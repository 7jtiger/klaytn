version: 2.1

aliases:
  - &filter-only-version-tag
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore: /.*/
  - &filter-version-tag-branch
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore: 
        - /release\/.*/
        - dev
        - old-makefile
        - packaging
  - &filter-version-not-release
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore: /release\/.*/

orbs:
  codecov: codecov/codecov@1.0.5

executors:
  test-executor:
    working_directory: /go/src/github.com/klaytn/klaytn
    docker:
      - image: klaytn/build_base:1.0-go1.13.3-solc0.4.24

  rpm-executor:
    working_directory: /go/src/github.com/klaytn/klaytn
    docker:
      - image: klaytn/circleci-rpmbuild:1.13.3-4

  default:
    docker:
      - image: circleci/golang:latest

commands:
  install_awscli:
    description: "Install AWS CLI"
    steps:
      - run: 
          name: "Install AWS CLI"
          command: |
            curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python get-pip.py --user
            ~/.local/bin/pip install awscli --upgrade --user
  pre-build:
    description: "before build, set version"
    steps:
      - run: 
          name: "set variables"
          command: |
            export GOPATH=~/go
            echo "export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)" >> $BASH_ENV
            if [ -z "$CIRCLE_TAG" ]; then
              echo "this is not RC version"
            else
              echo "this is rc version $CIRCLE_TAG"
              rc_num=$(echo $CIRCLE_TAG | cut -d '-' -f 2)
              sed -i 's/%d.%d.%d/%d.%d.%d~'$rc_num'/' params/version.go
              sed -n '/%d.%d.%d/p' params/version.go
            fi
            echo "export KLAYTN_VERSION=$(go run build/rpm/main.go version)" >> $BASH_ENV
            echo $KLAYTN_VERSION | echo $KLAYTN_RELEASE_NUM
  build:
    description: "Build for each OS/Network"
    parameters:
      os-network:
        type: string
        default: "klay-linux-amd64"
    steps:
      - run:
          name: "Build for << parameters.os-network >>"
          command: echo $KLAYTN_VERSION; make << parameters.os-network >>
  build-new:
    description: "Build for each OS/Network"
    parameters:
      os-network:
        type: string
        default: "tar-linux-amd64-all"
    steps:
      - run:
          name: "build new"
          command: export GOPATH=~/go ; make << parameters.os-network >>
  packaging:
    description: "Packaging by OS"
    parameters:
      os:
        type: string
        default: "linux-amd64"
      item:
        type: string
        default: "kcn kpn ken kgen kscn kbn kspn ksen"
    steps:
      - run: 
          name: "Packaging << parameters.os >>"
          command: |
            for item in kcn kpn ken kgen kscn kbn kspn ksen
            do
              PACK_NAME=${item}-<< parameters.os >>
              if [ ${item} = kgen ]; then
                mkdir -p ${PACK_NAME}/bin
                cp build/bin/${item}-* ${PACK_NAME}/bin/${item}
              else
                mkdir -p ${PACK_NAME}/{bin,conf}
                cp build/bin/${item}-* ${PACK_NAME}/bin/${item}
                cp build/packaging/linux/bin/${item}d ${PACK_NAME}/bin/
                cp build/packaging/linux/conf/${item}d.conf ${PACK_NAME}/conf/
              fi
              KLAYTN_PACKAGE_NAME="${item}-${KLAYTN_VERSION}-${KLAYTN_RELEASE_NUM}-<< parameters.os >>.tar.gz"
              #KLAYTN_PACKAGE_NAME="${item}-${KLAYTN_VERSION}-<< parameters.os >>.tar.gz"
              tar czf $KLAYTN_PACKAGE_NAME $PACK_NAME
              #test
              aws s3 cp $KLAYTN_PACKAGE_NAME s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/
            done
  upload-repo:
    description: "upload packaging tar.gz"
    parameters:
      item:
        type: string
        default: "kcn kpn ken kgen kscn kbn kspn ksen"
    steps:
      - run:
          name: "upload S3 repo"
          command: |
            for item in kcn kpn ken kgen kscn kbn kspn ksen; do aws s3 cp ${item}-*.tar.gz s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/; done
  packaging-baobab:
    description: "Packaging baobab versions of kcn, kpn, ken for << parameters.os >>"
    parameters:
      os:
        type: string
        default: "linux-amd64"
    steps:
      - run: 
          name: "Packaging baobab versions of kcn, kpn, ken"
          command: |
            for item in kcn kpn ken
            do
              PACK_NAME=${item}-<< parameters.os >>
              mkdir -p ${PACK_NAME}/{bin,conf}
              cp build/bin/${item}-* ${PACK_NAME}/bin/${item}
              cp build/packaging/linux/bin/${item}d ${PACK_NAME}/bin/
              cp build/packaging/linux/conf/${item}d_baobab.conf ${PACK_NAME}/conf/${item}d.conf
              KLAYTN_PACKAGE_NAME="${item}-${KLAYTN_VERSION}-${KLAYTN_RELEASE_NUM}-<< parameters.os >>.tar.gz"
              #KLAYTN_PACKAGE_NAME="${item}-baobab-${KLAYTN_VERSION}-<< parameters.os >>.tar.gz"
              tar czf $KLAYTN_PACKAGE_NAME $PACK_NAME
              #test
              aws s3 cp $KLAYTN_PACKAGE_NAME s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/
            done
  rpm-tagged:
    description: "rpm tagging for cypress"
    steps:
      - run:
          name: "rpm tagging"
          command: |
            echo $KLAYTN_VERSION | echo $KLAYTN_RELEASE_NUM
            for item in kcn kpn ken kscn kbn
            do
              cd /go/src/github.com/klaytn/klaytn
              go run build/rpm/main.go gen_spec --node_type $item > /rpmbuild/SPECS/${item}d-$KLAYTN_VERSION.spec
              cd /go/src/github.com/klaytn
              cp -R klaytn ${item}d-$KLAYTN_VERSION
              ls -R ${item}d-$KLAYTN_VERSION/build/rpm/etc/init.d
              tar czf ${item}d-$KLAYTN_VERSION.tar.gz ${item}d-$KLAYTN_VERSION
              mv ${item}d-$KLAYTN_VERSION.tar.gz /rpmbuild/SOURCES/
              rpmbuild -ba /rpmbuild/SPECS/${item}d-$KLAYTN_VERSION.spec
              TARGET_RPM="/rpmbuild/RPMS/x86_64/${item}d-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM.el7.x86_64.rpm"
              #TARGET_RPM="/rpmbuild/RPMS/x86_64/${item}d-$KLAYTN_VERSION.el7.x86_64.rpm"
              python -m awscli s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/rhel/7/prod/
              #aws s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/rhel/7/prod/
              python -m awscli s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              echo "${item} tagged !!!"
            done      
  rpm-tagging:
    description: "rpm tagging for cypress"
    steps:
      - run:
          name: "rpm tagging"
          command: make rpm-all
  rpm-tagging-baobab:
    description: "rpm tagging for baobab"
    steps:
      - run:
          name: "rpm tagging baobab"
          command: |
              make rpm-baobab-kcn
              make rpm-baobab-kpn
              make rpm-baobab-ken
              
  rpm-tagged-baobab:
    description: "rpm tagged baobab"
    steps:
      - run:
          name: "rpm tagging"
          command : |
            echo $KLAYTN_VERISON | echo $KLAYTN_RELEASE_NUM
            for item in kcn kpn ken
            do
              cd /go/src/github.com/klaytn/klaytn
              go run build/rpm/main.go gen_spec --node_type $item --baobab > /rpmbuild/SPECS/${item}d-baobab-$KLAYTN_VERSION.spec
              cd /go/src/github.com/klaytn
              cp -R klaytn ${item}d-baobab-$KLAYTN_VERSION
              ls -R ${item}d-baobab-$KLAYTN_VERSION/build/rpm/etc/init.d
              tar czf ${item}d-baobab-$KLAYTN_VERSION.tar.gz ${item}d-baobab-$KLAYTN_VERSION
              mv ${item}d-baobab-$KLAYTN_VERSION.tar.gz /rpmbuild/SOURCES/
              rpmbuild -ba /rpmbuild/SPECS/${item}d-baobab-$KLAYTN_VERSION.spec
              TARGET_RPM="/rpmbuild/RPMS/x86_64/${item}d-baobab-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM.el7.x86_64.rpm"
              #TARGET_RPM="/rpmbuild/RPMS/x86_64/${item}d-baobab-$KLAYTN_VERSION.el7.x86_64.rpm"
              python -m awscli s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/rhel/7/prod/
              #aws s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/rhel/7/prod/
              python -m awscli s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              echo "${item} tagged !!!"
            done 
  createrepo-update:
    steps:
      - run:
          name: "createrepo update"
          command: |
            yum -y install createrepo
            python -m awscli s3 sync s3://klaytn-packages-repo-dev/packages/rhel/7/prod/ rhel/7/prod/
            createrepo --update rhel/7/prod
            python -m awscli s3 sync --delete rhel/7/prod/repodata/ s3://klaytn-packages-repo-dev/packages/rhel/7/prod/repodata/
  tag-verify:
    steps:
      - run:
          name: "Verify tag and file verison match"
          command: |
            echo "tag version is " $CIRCLE_TAG
            KLAYTN_VERSION=$(go run build/rpm/main.go version)
            echo "version on version.go" $KLAYTN_VERSION
            if [ $KLAYTN_VERSION == ${CIRCLE_TAG%-*} ]; then
              echo "verification pass"
            else
              echo "It's not same version."
              exit 1
            fi
  make-pr:
    steps:
      - run:
          name: "Push to release branch"
          command: |
              echo "push to release branch: /release/${CIRCLE_TAG%-*}"
              git checkout -b release/${CIRCLE_TAG%-*}
              git push origin release/${CIRCLE_TAG%-*}
      - run:
          name: "Install hub" 
          command: |
              curl -sSLf https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz | \
                tar zxf - --strip-components=1 -C /tmp && \
                sudo mv /tmp/bin/hub /usr/local/bin/hub
              type hub
      - run:
          name: "Create pull request" 
          command: |
              version=$(hub pr list -s open -L 10 -f "%H%n")
              echo $version
              if [[ $version == *"release/${CIRCLE_TAG%-*}"* ]]; then
                echo "PR already exist"
              else
                echo "hub pull-request -m "[Master] release/$CIRCLE_TAG QA Signoff" -b $CIRCLE_PROJECT_USERNAME:master -h $CIRCLE_PROJECT_USERNAME:${CIRCLE_TAG%-*}"
                echo -e "[Master] release/${CIRCLE_TAG%-*} QA Sign-off\n\nThis PR is automatically created by CI to release a new official version of $CIRCLE_PROJECT_REPONAME.\n\nWhen this PR is approved by QA team, a new version will be released." | hub pull-request -b $CIRCLE_PROJECT_USERNAME:master -h $CIRCLE_PROJECT_USERNAME:release/${CIRCLE_TAG%-*} -r $GITHUB_reviewer -l circleci -F-
              fi
  tagging-delete-branch:
    steps:
      - run:
          name: "Generate tag"
          command: |
              export version=$(go run build/rpm/main.go version) >> $BASH_ENV
              echo "git tag $version"
              git tag $version
              git push origin $version
      - run:
          name: "Delete release branch"
          command: |
              export version=$(go run build/rpm/main.go version) >> $BASH_ENV
              #delete release branch. it trigger by merge title
              if [[ "release/v" = $(git log --oneline -1 | grep -o "release/v") ]]; then
                echo "Delete branch release/$version"
                git push origin --delete release/$version
              else
                echo "Need to delete branch manually"
              fi  
  nofity_success:
    steps:
      - run:
          name: "notify slack when job success"
          command : |
            curl --data '{"text": ""✅ Job **'$CIRCLE_JOB'** succeeded on **'$CIRCLE_BRANCH''$CIRCLE_TAG'**. Please see '$CIRCLE_BUILD_URL' for details."}' "$SLACK_WEBHOOK_URL"
          when: on_success
  nofity_failure:
    steps:
      - run:
          name: "notify slack when job fail"
          command : |
            curl --data '{"text": ""❌ Job **'$CIRCLE_JOB'** failed on **'$CIRCLE_BRANCH'**. Please see '$CIRCLE_BUILD_URL' for details."}' "$SLACK_WEBHOOK_URL"
          when: on_fail

jobs:
  build-all:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - pre-build
      - run:
          name: "Build"
          command: |
            curl -O https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz
            mkdir $HOME/go1.12.5
            tar -C $HOME/go1.12.5 -xzf go1.12.5.linux-amd64.tar.gz
            export PATH=$HOME/go1.12.5/go/bin:$PATH
            #make fmt
            make all
  build-linux:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - pre-build
      - build
      - persist_to_workspace:
          root: /home/circleci/go/src/github.com/klaytn/klaytn
          paths: 
            - build

  test-datasync:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test datasync"
          command: make test-datasync

  test-networks:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test networks"
          command: make test-networks

  test-tests:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test tests"
          command: |
            git clone --depth 1 https://$TEST_TOKEN@github.com/klaytn/klaytn-tests.git tests/testdata
            make test-tests
  test-others:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test others"
          command: make test-others
  
  pass-tests:
    executor: default
    steps:
      - run: 
          name: "tests Success!"
          command: echo "tests pass!"          

  coverage:
    executor: test-executor
    resource_class: xlarge
    steps:
      - checkout
      - run:
          shell: /bin/bash
          name: "Run coverage tests"
          command: |
            set -e
            export GOPATH=/go
            git clone --depth 1 https://$TEST_TOKEN@github.com/klaytn/klaytn-tests.git tests/testdata            
            mkdir -p /tmp/coverage_reports
            cp coverage_report.txt /tmp/coverage_reports/
            cp coverage_report.html /tmp/coverage_reports/
            bash <(curl -s https://codecov.io/bash)
      - nofity_failure
      - nofity_success
      - store_artifacts:
          path: /tmp/coverage_reports

  linters:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run linters"
          command: |
            make lint-try
            mkdir -p /tmp/linter_reports
            cp linter_report.txt /tmp/linter_reports/
      - nofity_failure
      - nofity_success
      - store_artifacts:
          path: /tmp/linter_reports

  packaging-linux:
    machine: true
    #resource_class: large
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - pre-build
      - build-new
      #- build
      - upload-repo
      #- packaging

  packaging-linux-2:
    machine: true
    #resource_class: large
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - attach_workspace:
          at: /home/circleci/go/src/github.com/klaytn/klaytn
      - packaging

  packaging-linux-baobab:
    machine: true
    #resource_class: large
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - pre-build
      - build-new:
          os-network: "tar-baobab-linux-amd64-all"
      #- build
      - upload-repo:
          item: "kcn kpn ken"
      #- packaging-baobab

  packaging-darwin:
    machine: true
    #resource_class: large
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - pre-build
      #- build:
      #    os-network: "klay-darwin-amd64"
      - build-new:
          os-network: "tar-darwin-amd64-all"
      - upload-repo
      # - packaging:
      #     os: "darwin-amd64"
      

  packaging-darwin-baobab:
    machine: true
    #resource_class: large
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - pre-build
      #- build:
      #    os-network: "klay-darwin-amd64"
      - build-new:
          os-network: "tar-baobab-darwin-amd64-all"
      - upload-repo:
          item: "kcn kpn ken"
      #- packaging-baobab:
      #    os: "darwin-amd64"

  rpm-tagged:
    executor: rpm-executor
    steps:
      - checkout
      - install_awscli
      - pre-build
      - rpm-tagging
      #- rpm-tagged

  rpm-tagged-baobab:
    executor: rpm-executor
    steps:
      - checkout
      - install_awscli
      - pre-build
      - rpm-tagging-baobab
      #- rpm-tagged-baobab

  deploy-rpm-public:
    executor: rpm-executor
    steps:
      - install_awscli
      - createrepo-update

  tag-verify:
    executor: test-executor
    steps:
      - checkout
      - tag-verify

  release-PR:
    executor: default
    steps:
      - add_ssh_keys
      - checkout
      - make-pr

  major-tagging:
    executor: default
    steps:
      - add_ssh_keys
      - checkout
      - tagging-delete-branch

workflows:
  version: 2
  build_n_packaging:
    jobs:
      - build-all: 
          filters: *filter-version-not-release
      - test-datasync: 
          filters: *filter-version-not-release
      - test-networks: 
          filters: *filter-version-not-release
      - test-tests: 
          filters: *filter-version-not-release
      # - test-others: 
        #  filters: *filter-version-not-release
      # - build-linux:
      #     filters: *filter-version-not-release

      - pass-tests: 
          requires: 
            - build-all
            - test-datasync
            - test-networks
            - test-tests
            #- test-others
            #- build-linux
            - tag-verify
          filters: *filter-version-not-release
      
      - tag-verify:
          filters: *filter-only-version-tag

      - deploy-rpm-public: 
          requires:
            - rpm-tagged
            - rpm-tagged-baobab
            - packaging-linux
            - packaging-linux-baobab
            - packaging-darwin
            - packaging-darwin-baobab
          filters: 
            branches:
              only: master 

      - release-PR:
          requires:
            - rpm-tagged
            - rpm-tagged-baobab
            - packaging-linux
            - packaging-linux-baobab
            - packaging-darwin
            - packaging-darwin-baobab
          filters: *filter-only-version-tag

      - rpm-tagged: 
          requires:
            - pass-tests
          filters: *filter-version-tag-branch
      - rpm-tagged-baobab: 
          requires:
            - pass-tests
          filters: *filter-version-tag-branch

      - packaging-linux: 
          requires:
            - pass-tests
          filters: *filter-version-tag-branch
      - packaging-linux-baobab: 
          requires:
            - pass-tests
          filters: *filter-version-tag-branch
      - packaging-darwin: 
          requires:
            - pass-tests
          filters: *filter-version-tag-branch
      - packaging-darwin-baobab: 
          requires:
            - pass-tests
          filters: *filter-version-tag-branch
      # - packaging-linux-2:
      #     requires:
      #       - pass-tests
      #     filters: *filter-version-tag-branch

      - major-tagging:
          requires:
            - deploy-rpm-public
          filters:
            branches:
              only: master  

  nightly-coverage:
    triggers:
      - schedule:
          cron: "0 18 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - coverage

  nightly-linters:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - linters