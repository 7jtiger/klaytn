# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

aliases:
  - &filter-only-version-tag
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore: /.*/

orbs:
  codecov: codecov/codecov@1.0.5

executors:
  test-executor:
    working_directory: /go/src/github.com/klaytn/klaytn
    docker:
      - image: klaytn/build_base:1.0-go1.13.3-solc0.4.24
  rpm-executor:
    working_directory: /go/src/github.com/klaytn/klaytn
    docker:
      - image: klaytndevops/circleci-rpmbuild:1.13.3
  default:
    docker:
      - image: circleci/node:lts

commands:
  install_awscli:
    description: "Install AWS CLI"
    steps:
      - run: 
          name: "Install AWS CLI"
          command: |
            curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python get-pip.py --user
            ~/.local/bin/pip install awscli --upgrade --user
  build:
    description: "Build for each OS/Network"
    parameters:
      os-network:
        type: string
        default: "klay-linux-amd64"
    steps:
      - run:
          name: "Build for << parameters.os-network >>"
          command: |
            export GOPATH=~/go
            echo "export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)" >> $BASH_ENV
            echo "export KLAYTN_VERSION=$(go run build/rpm/main.go version)" >> $BASH_ENV
            make -j 8 << parameters.os-network >>
  packaging:
    description: "Packaging kcn kpn ken kgen kscn kbn kspn ksen"
    parameters:
      os:
        type: string
        default: "linux-amd64"
    steps:
      - run: 
          name: "Packaging kcn kpn ken kgen kscn kbn kspn ksen for << parameters.os >>"
          command: |
            for item in kcn kpn ken kgen kscn kbn kspn ksen
            do
              PACK_NAME=${item}-<< parameters.os >>
              if [ ${item} = kgen ]; then
                mkdir -p ${PACK_NAME}/bin
                cp build/bin/${item}-* ${PACK_NAME}/bin/${item}
              else
                mkdir -p ${PACK_NAME}/{bin,conf}
                cp build/bin/${item}-* ${PACK_NAME}/bin/${item}
                cp build/packaging/linux/bin/${item}d ${PACK_NAME}/bin/
                cp build/packaging/linux/conf/${item}d.conf ${PACK_NAME}/conf/
              fi
              KLAYTN_PACKAGE_NAME="${item}-${KLAYTN_VERSION}-${KLAYTN_RELEASE_NUM}-<< parameters.os >>.tar.gz"
              tar czf $KLAYTN_PACKAGE_NAME $PACK_NAME
              #test
              aws s3 cp $KLAYTN_PACKAGE_NAME s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/
            done
  packaging-baobab:
    description: "Packaging baobab versions of kcn, kpn, ken for << parameters.os >>"
    parameters:
      os:
        type: string
        default: "linux-amd64"
    steps:
      - run: 
          name: "Packaging baobab versions of kcn, kpn, ken"
          command: |
            for item in kcn kpn ken
            do
              PACK_NAME=${item}-<< parameters.os >>
              mkdir -p ${PACK_NAME}/{bin,conf}
              cp build/bin/${item}-* ${PACK_NAME}/bin/${item}
              cp build/packaging/linux/bin/${item}d ${PACK_NAME}/bin/
              cp build/packaging/linux/conf/${item}d_baobab.conf ${PACK_NAME}/conf/${item}d.conf
              KLAYTN_PACKAGE_NAME="${item}-baobab-${KLAYTN_VERSION}-${KLAYTN_RELEASE_NUM}-<< parameters.os >>.tar.gz"
              tar czf $KLAYTN_PACKAGE_NAME $PACK_NAME
              #test
              aws s3 cp $KLAYTN_PACKAGE_NAME s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/
            done
  rpm-tagged:
    description: "rpm tagging for cypress and baobab"
    parameters:
      network:
        type: string
        default: "d"
      resources:
        type: string
        default: "kcn kpn ken kscn kbn"
    steps:
      - run:
          name: "rpm tagging"
          command: |
            export GOPATH=/go
            export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)

            for item in << parameters.resources >>  #kgen
            do
              cd /go/src/github.com/klaytn/klaytn
              go run build/rpm/main.go gen_spec --node_type $item > /rpmbuild/SPECS/${item}d-$KLAYTN_VERSION.spec
              cd /go/src/github.com/klaytn
              cp -R klaytn ${item}d-$KLAYTN_VERSION
              ls -R ${item}d-$KLAYTN_VERSION/build/rpm/etc/init.d
              tar czf ${item}d-$KLAYTN_VERSION.tar.gz ${item}d-$KLAYTN_VERSION
              mv ${item}d-$KLAYTN_VERSION.tar.gz /rpmbuild/SOURCES/
              rpmbuild -ba /rpmbuild/SPECS/${item}d-$KLAYTN_VERSION.spec
              TARGET_RPM="/rpmbuild/RPMS/x86_64/${item}d-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM.el7.x86_64.rpm"
              python -m awscli s3 cp $TARGET_RPM s3://klaytn-packages-repo-dev/packages/rhel/7/prod/
              echo "${item} tagged !!!"
            done      
  rpm-tagged-baobab:
    description: "rpm tagged baobab"
    steps:
      - run:
          name: "rpm tagging"
          command : |
            export GOPATH=/go
            export KLAYTN_RELEASE_NUM=$(go run build/rpm/main.go release_num)
            export KLAYTN_VERSION=$(go run build/rpm/main.go version)

            for item in kcn kpn ken
            do
              cd /go/src/github.com/klaytn/klaytn
              go run build/rpm/main.go gen_spec --node_type $item --baobab > /rpmbuild/SPECS/${item}d-baobab-$KLAYTN_VERSION.spec
              cd /go/src/github.com/klaytn
              cp -R klaytn ${item}d-baobab-$KLAYTN_VERSION
              ls -R ${item}d-baobab-$KLAYTN_VERSION/build/rpm/etc/init.d
              tar czf ${item}d-baobab-$KLAYTN_VERSION.tar.gz ${item}d-baobab-$KLAYTN_VERSION
              mv ${item}d-baobab-$KLAYTN_VERSION.tar.gz /rpmbuild/SOURCES/
              rpmbuild -ba /rpmbuild/SPECS/${item}d-baobab-$KLAYTN_VERSION.spec
              TARGET_RPM="/rpmbuild/RPMS/x86_64/${item}d-baobab-$KLAYTN_VERSION-$KLAYTN_RELEASE_NUM.el7.x86_64.rpm"
              python -m awscli s3 cp $TARGET_RPM s3://klaytn-packages-repo-dev/packages/rhel/7/prod/
              echo "${item} tagged !!!"
            done 
  createrepo-update:
    steps:
      - run:
          name: "createrepo update"
          command: |
            yum -y install createrepo
            python -m awscli s3 sync s3://klaytn-packages-repo-dev/packages/rhel/7/prod/ rhel/7/prod/
            createrepo --update rhel/7/prod
            python -m awscli s3 sync --delete rhel/7/prod/repodata/ s3://klaytn-packages-repo-dev/packages/rhel/7/prod/repodata/

jobs:
  build_all:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - run:
          name: "Build"
          command: |
            curl -O https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz
            mkdir $HOME/go1.12.5
            tar -C $HOME/go1.12.5 -xzf go1.12.5.linux-amd64.tar.gz
            export PATH=$HOME/go1.12.5/go/bin:$PATH
            make fmt
            make all

  test-datasync:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test datasync"
          command: make test-datasync

  test-networks:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test networks"
          command: make test-networks

  test-tests:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test tests"
          command: |
            git clone --depth 1 https://$TEST_TOKEN@github.com/klaytn/klaytn-tests.git tests/testdata
            make test-tests

  test-others:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test others"
          command: make test-others
  
  pass-tests:
    executor: default
    steps:
      - run: 
          name: "tests Success!"
          command: echo "tests pass!"          

  coverage:
    executor: test-executor
    resource_class: xlarge
    steps:
      - checkout
      - run:
          shell: /bin/bash
          name: "Run coverage tests"
          command: |
            set -e
            export GOPATH=/go
            git clone --depth 1 https://$TEST_TOKEN@github.com/klaytn/klaytn-tests.git tests/testdata
            make cover
            mkdir -p /tmp/coverage_reports
            cp coverage_report.txt /tmp/coverage_reports/
            cp coverage_report.html /tmp/coverage_reports/
            bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: /tmp/coverage_reports

  linters:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run linters"
          command: |
            make lint-try
            mkdir -p /tmp/linter_reports
            cp linter_report.txt /tmp/linter_reports/
      - store_artifacts:
          path: /tmp/linter_reports

  packaging-linux:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - build
      - packaging

  packaging-linux-baobab:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - build
      - packaging-baobab

  packaging-darwin:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - build:
          os-network: "klay-darwin-amd64"
      - packaging:
          os: "darwin-amd64"

  packaging-darwin-baobab:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - build:
          os-network: "klay-darwin-amd64"
      - packaging-baobab:
          os: "darwin-amd64"

  packaging-windows:
    machine: true
    working_directory: ~/go/src/github.com/klaytn/klaytn
    steps:
      - checkout
      - install_awscli
      - build:
          os-network: "klay-windows-amd64"
      - packaging:
          os: "windows-amd64"
      - run:
          name: "Packaging kcn, kpn, ken, kgen for windows"
          command: |
            for item in kcn kpn ken kgen
            do
              PACK_NAME=${item}-windows-amd64
              if [ ${item} = kgen ]; then
                mkdir -p ${PACK_NAME}/bin
                cp build/bin/${item}-windows-4.0-amd64.exe ${PACK_NAME}/bin/${item}.exe
              else
                mkdir -p ${PACK_NAME}/{bin,conf}
                cp build/bin/${item}-windows-4.0-amd64.exe ${PACK_NAME}/bin/${item}.exe
                cp build/packaging/windows/conf/${item}-conf.cmd ${PACK_NAME}/conf/
                cp build/packaging/windows/start-${item}.bat ${PACK_NAME}/
              fi
              KLAYTN_PACKAGE_NAME="${item}-${KLAYTN_VERSION}-${KLAYTN_RELEASE_NUM}-windows-amd64.tar.gz"
              tar czf $KLAYTN_PACKAGE_NAME $PACK_NAME
              #test
              aws s3 cp $KLAYTN_PACKAGE_NAME s3://$FRONTEND_BUCKET/packages/klaytn/$KLAYTN_VERSION/
              #aws s3 cp $KLAYTN_PACKAGE_NAME s3://klaytn-ops-stuff/releases/klaytn/latest/
            done

  rpm-tagged:
    executor: rpm-executor
    steps:
      - checkout
      - install_awscli
      - rpm-tagged

  rpm-tagged-baobab:
    executor: rpm-executor
    steps:
      - checkout
      - install_awscli
      - rpm-tagged-baobab

  deploy-rpm-public:
    executor: rpm-executor
    steps:
      - install_awscli
      - createrepo-update

workflows:
  version: 2
  build_n_packaging:
    jobs:
      - build_all:
          filters: *filter-only-version-tag

      - test-datasync:
          filters: *filter-only-version-tag

      - test-networks:
          filters: *filter-only-version-tag

      - test-tests:
          filters: *filter-only-version-tag

      # - test-others:
      #     filters: *filter-only-version-tag

      - pass-tests:
          requires:
            - build_all
            - test-datasync
            - test-networks
            - test-tests
            - test-others
          filters: *filter-only-version-tag

      - deploy-rpm-public:
          requires:
            - rpm-tagged
            - rpm-tagged-baobab
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - rpm-tagged:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - rpm-tagged-baobab:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - packaging-linux:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - packaging-linux-baobab:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - packaging-darwin:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - packaging-darwin-baobab:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - packaging-windows:
          requires:
            - pass-tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  nightly-coverage:
    triggers:
      - schedule:
          cron: "0 18 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - coverage

  nightly-linters:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - linters
